#version 430

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
//

vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289(((x*34.0)+10.0)*x);
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
    -0.577350269189626,  // -1.0 + 2.0 * C.x
    0.024390243902439); // 1.0 / 41.0
    // First corner
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);

    // Other corners
    vec2 i1;
    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    + i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

    // Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}
















const uint MAX_OCTAVES = 16;

struct NoiseData {
    float scale;
    uint octaves;
    float persistence;
    float lacunarity;
    vec2 offsets[MAX_OCTAVES];
};

layout(local_size_x = 1, local_size_y = 1) in;

layout(r32f, binding = 0) uniform image2D HeightMap;
uniform NoiseData Noise;

float onoise(vec2 pos) {
    float noise_height = 0.0;
    float amplitude = 1.0;
    float frequency = 4.0;

    // sum up the height at the position for all octaves
    for (int i = 0; i < Noise.octaves; i++) {
        vec2 sample_pos = pos / Noise.scale * frequency + Noise.offsets[i];
        noise_height += snoise(sample_pos) * amplitude;

        amplitude *= Noise.persistence;
        frequency *= Noise.lacunarity;
    }

    return noise_height * 0.75 + 1.5;
}

float heightModifyer(float x, float s) {
    float c = 2 / (1 + exp(s));

    return (1 / (1 - c)) * (2 / (1 + exp(s * (1 - x))) - c);
}

void main() {
    // get index in global work group i.e x,y position
    ivec2 textureCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy);

    float minCutoff = 0.4;
    float falloff = - minCutoff * pow(5 * length(uv - 0.5) - 1, 2) + 1;
    falloff = clamp(falloff, minCutoff, 1);

    float adjustment = 1.0;
    for (int i = 1; i < Noise.octaves; i++) {
        adjustment += pow(Noise.persistence, i + 1);
    }

    float height = onoise(uv) / adjustment;

    vec2 mountain_pos = Noise.offsets[0];
    float mountain_radius = 0.3;

    float dist = length(uv - mountain_pos);
    height = (height + 1) / 2 * falloff;
    height = (height * 2) - 1;

    float flat_mul = 0.4;


    if (height > 0.0) {
        if (dist < mountain_radius) {
            height = height * mix(flat_mul, 2, pow(1.0 - dist / mountain_radius, 2));
        }
        else{
            height = height * flat_mul;
        }
    }
    else {
        //height = 0.0; // clamp water
    }

    height = (height + 1) / 2;

    if (height < 0.6) {
        height += (height - 0.6);
    }


    float temp = 0.48;
    float helpHeight;
    if (height > temp) {
        helpHeight = (height - temp) * 2;
        helpHeight = pow(helpHeight, 1.5);
        helpHeight = helpHeight / 2 + temp;

        if (dist < mountain_radius) {
            height = mix(helpHeight, height, pow(1.0 - dist / mountain_radius, 2));
        }
        else{
            height = helpHeight;
        }
    }

    height += 0.01;
    

    imageStore(HeightMap, textureCoords, vec4(height));
}
